{"version":3,"sources":["App.module.css","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","state","sortDirection","policies","client","headers","newRecord","customer_name","customer_address","premium","policy_type","insurer_name","formValid","filterPolicies","restHandler","setState","data","name","Object","keys","handleFilterChange","event","filtered","filterArr","target","value","filter","f","inputHandler","field","newObj","prevState","newRecordObj","newRecordKeys","map","key","record","length","addHandler","newArr","deleteHandler","index","splice","changeDataHandler","col","headerClickHandler","console","log","id","policiesArr","dataType","sortIndex","getAttribute","sort","a","b","numA","Number","numB","arrA","toUpperCase","split","arrB","shift","textAA","join","textBB","textA","textB","direction","sortDirectionNew","this","TableCell","header","displayHeader","headerPart","charAt","concat","slice","HeaderTag","replace","is","onClick","data-index","className","classes","hidden","customers","TableRow","customer","type","onChange","Button","variant","color","Container","fixed","Paper","elevation","Typography","RadioGroup","row","style","display","defaultValue","FormControlLabel","control","Radio","label","Table","TableHead","TableBody","disabled","Spacer","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.423bd404.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16ZpL\",\"hidden\":\"App_hidden__3ofBD\",\"Spacer\":\"App_Spacer__2X0KP\"};","import React, { Component } from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Button from '@material-ui/core/Button';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Divider from '@material-ui/core/Divider';\n\nimport data from './data/data.json'\n// import axios from 'axios';\n\nimport classes from './App.module.css';\n\nclass App extends Component {\n\n  state = {\n    sortDirection: [null, null, null, null, null],\n    policies: null,\n    client: null,\n    headers: null,\n    newRecord: {\n      customer_name: '',\n      customer_address: '',\n      premium: '',\n      policy_type: '',\n      insurer_name: ''\n    },\n    formValid: false,\n    filterPolicies: null,\n  }\n\n  componentDidMount() {\n    // console.log(data, Object.keys(data.client.policies[0]))\n\n    //set state from JSON\n    this.setState({\n      policies: data.client.policies,\n      client: data.client.name,\n      headers: Object.keys(data.client.policies[0]),     //get headers from JSON\n      filterPolicies: data.client.policies,\n    });\n  }\n\n  restHandler = () => {\n    this.setState({\n      sortDirection: [null, null, null, null, null],\n      policies: data.client.policies,\n      client: data.client.name,\n      headers: Object.keys(data.client.policies[0]),\n      newRecord: {\n        customer_name: '',\n        customer_address: '',\n        premium: '',\n        policy_type: '',\n        insurer_name: ''\n      },\n      formValid: false,\n      filterPolicies: data.client.policies\n    });\n  }\n\n  handleFilterChange = (event) => {\n\n    const filterArr = [...this.state.filterPolicies];\n\n    let filtered;\n    switch (event.target.value) {\n      case 'more':\n        filtered = filterArr.filter((f) => {\n          return f.premium >= 3000\n        });\n        break;\n      case 'less':\n        filtered = filterArr.filter((f) => {\n          return f.premium < 3000\n        });\n        break;\n      default:\n        filtered = this.state.filterPolicies;\n    }\n\n    this.setState({\n      policies: filtered\n    });\n  }\n\n  inputHandler = (event, field) => {\n    const newObj = { ...this.state.newRecord };\n    newObj[field] = event.target.value;\n\n    this.setState({\n      newRecord: newObj\n    });\n\n    this.setState((prevState) => {\n\n      const newRecordObj = prevState.newRecord\n      const newRecordKeys = Object.keys(newRecordObj);\n\n      const validCount = newRecordKeys\n        .map((key) => {\n          return newRecordObj[key];\n        })\n        .filter((record) => {\n          return record.length > 0;\n        });\n\n      return {\n        formValid: validCount.length === newRecordKeys.length\n      }\n    });\n  }\n\n\n  addHandler = () => {\n    this.setState((prevState) => {\n      return {\n        policies: prevState.filterPolicies,\n      }\n    });\n    const newArr = [...this.state.filterPolicies, this.state.newRecord];\n\n    this.setState({\n      newRecord: {\n        customer_name: '',\n        customer_address: '',\n        premium: '',\n        policy_type: '',\n        insurer_name: ''\n      },\n      formValid: false,\n      policies: newArr,\n      filterPolicies: newArr\n    });\n  }\n\n  deleteHandler = (index) => {\n    this.setState((prevState) => {\n      return {\n        policies: prevState.filterPolicies,\n      }\n    });\n\n    const newArr = [...this.state.filterPolicies];\n    newArr.splice(index, 1);\n\n    this.setState({\n      policies: newArr,\n      filterPolicies: newArr\n    });\n  }\n\n  changeDataHandler = (event, col, index) => {\n    this.setState((prevState) => {\n      return {\n        policies: prevState.filterPolicies,\n      }\n    });\n\n    const newArr = [...this.state.policies];\n    newArr[index][col] = event.target.value;\n\n    this.setState({\n      policies: newArr,\n      filterPolicies: newArr\n    });\n  }\n\n  //handle clicks on table headers\n  headerClickHandler = (event) => {\n    console.log(event.target.id)\n\n    let policiesArr = [...this.state.policies];\n    const dataType = event.target.id;\n    const sortIndex = event.target.getAttribute('data-index');\n\n    if (dataType === 'premium') {\n      policiesArr.sort((a, b) => {\n        let numA = Number(a[dataType]);\n        let numB = Number(b[dataType]);\n\n        if (!this.state.sortDirection[sortIndex] || this.state.sortDirection[sortIndex] === 'DESC') {\n          return (numA < numB) ? -1 : (numA > numB) ? 1 : 0;\n        }\n        else {\n          return (numA > numB) ? -1 : (numA < numB) ? 1 : 0;\n        }\n      });\n    }\n\n    else if (dataType === 'customer_address') {\n\n      policiesArr.sort((a, b) => {\n        let arrA = a[dataType].toUpperCase().split(' ');\n        let arrB = b[dataType].toUpperCase().split(' ');\n\n        if (arrA.length > 1) {\n          arrA.shift();\n        }\n        if (arrB.length > 1) {\n          arrB.shift();\n        }\n\n        let textAA = arrA.join(' ');\n        let textBB = arrB.join(' ');\n\n        if (!this.state.sortDirection[sortIndex] || this.state.sortDirection[sortIndex] === 'DESC') {\n          return (textAA < textBB) ? -1 : (textAA > textBB) ? 1 : 0;\n        }\n        else {\n          return (textAA > textBB) ? -1 : (textAA < textBB) ? 1 : 0;\n        }\n      });\n    }\n    else {\n      policiesArr.sort((a, b) => {\n        let textA = a[dataType].toUpperCase();\n        let textB = b[dataType].toUpperCase();\n        if (!this.state.sortDirection[sortIndex] || this.state.sortDirection[sortIndex] === 'DESC') {\n          return (textA < textB) ? -1 : (textA > textB) ? 1 : 0;\n        }\n        else {\n          return (textA > textB) ? -1 : (textA < textB) ? 1 : 0;\n        }\n      });\n    }\n\n    let direction = 'DESC'\n    if (!this.state.sortDirection[sortIndex] || this.state.sortDirection[sortIndex] === 'DESC') {\n      direction = 'ASC';\n    }\n\n    let sortDirectionNew = [null, null, null, null, null];\n    sortDirectionNew[sortIndex] = direction;\n\n    this.setState({\n      policies: policiesArr,\n      filterPolicies: policiesArr,\n      sortDirection: sortDirectionNew\n    });\n  }\n\n  render() {\n\n    let headers = (\n      <TableCell>\n        <p>Loading...</p>\n      </TableCell>\n    );\n\n    if (this.state.headers) {\n      headers = this.state.headers.map((header, index) => {\n\n        //get nicely formatted display headeers to show on the page\n        const displayHeader = header.split('_').map((headerPart) => {\n          return headerPart.charAt(0).toUpperCase().concat(headerPart.slice(1));\n        }).join(' ');\n\n        //create a component tag in the correct format\n        let HeaderTag = header.replace('_', '');\n        HeaderTag = HeaderTag.charAt(0).toUpperCase().concat(HeaderTag.slice(1));\n\n        return (\n          <TableCell key={`id_${header}_${index}`}>\n            <HeaderTag is='custom' onClick={this.headerClickHandler} id={header} data-index={index}>\n              {displayHeader}{this.state.sortDirection[index] === 'ASC' ? <span>&gt;</span> : this.state.sortDirection[index] === 'DESC' ? <span>&lt;</span> : <span className={classes.hidden}>_</span>}\n            </HeaderTag>\n          </TableCell >\n        );\n      })\n    }\n\n    let customers = (\n      <TableRow>\n        <TableCell>\n          <p>Loading...</p>\n        </TableCell>\n      </TableRow>\n    );\n\n    if (this.state.policies) {\n\n      customers = this.state.policies.map((customer, index) => {\n        return (\n          <TableRow key={`id_${customer.customer_name}_${index}`}>\n            <TableCell><input type='text' value={customer.customer_name} onChange={(event) => this.changeDataHandler(event, 'customer_name', index)}></input></TableCell>\n            <TableCell><input type='text' value={customer.customer_address} onChange={(event) => this.changeDataHandler(event, 'customer_address', index)}></input></TableCell>\n            <TableCell><input type='text' value={customer.premium} onChange={(event) => this.changeDataHandler(event, 'premium', index)}></input></TableCell>\n            <TableCell><input type='text' value={customer.policy_type} onChange={(event) => this.changeDataHandler(event, 'policy_type', index)}></input></TableCell>\n            <TableCell><input type='text' value={customer.insurer_name} onChange={(event) => this.changeDataHandler(event, 'insurer_name', index)}></input></TableCell>\n            <TableCell><Button variant=\"contained\" color=\"secondary\" onClick={() => this.deleteHandler(index)}>Delete</Button></TableCell>\n          </TableRow>\n        );\n      })\n    }\n    return (\n      <div className={classes.App}>\n        <Container fixed>\n          <Paper elevation={3}>\n            <Typography variant=\"h2\">\n              {this.state.client} jjjjjjj\n            </Typography>\n            <p>Online policy database. Columns can be sorted by clicking on the column headings.</p>\n            <RadioGroup row style={{ display: 'block' }} onChange={this.handleFilterChange} defaultValue='none'>\n              <FormControlLabel\n                value='more'\n                control={\n                  <Radio\n                    color='primary'\n                  />\n                }\n                label='Premium £3000 or more'\n              />\n              <FormControlLabel\n                value='less'\n                control={\n                  <Radio\n                    color='primary'\n                  />\n                }\n                label='Premium less than £3000'\n              />\n              <FormControlLabel\n                value='none'\n                control={\n                  <Radio\n\n                    color='primary'\n                  />\n                }\n                label='No filter'\n              />\n            </RadioGroup>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  {headers}\n                  <TableCell></TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {customers}\n                <TableRow>\n                  <TableCell>\n                    <input type='text' onChange={(event) => this.inputHandler(event, 'customer_name')} value={this.state.newRecord['customer_name'] || ''} />\n                  </TableCell>\n                  <TableCell>\n                    <input type='text' onChange={(event) => this.inputHandler(event, 'customer_address')} value={this.state.newRecord['customer_address'] || ''} />\n                  </TableCell>\n                  <TableCell>\n                    <input type='text' onChange={(event) => this.inputHandler(event, 'premium')} value={this.state.newRecord['premium'] || ''} />\n                  </TableCell>\n                  <TableCell>\n                    <input type='text' onChange={(event) => this.inputHandler(event, 'policy_type')} value={this.state.newRecord['policy_type'] || ''} />\n                  </TableCell>\n                  <TableCell>\n                    <input type='text' onChange={(event) => this.inputHandler(event, 'insurer_name')} value={this.state.newRecord['insurer_name'] || ''} />\n                  </TableCell>\n                  <TableCell>\n                    <Button variant=\"contained\" color=\"primary\" onClick={this.addHandler} disabled={!this.state.formValid}>Add Policy</Button>\n                  </TableCell>\n                </TableRow>\n              </TableBody>\n            </Table>\n            <div className={classes.Spacer}>\n              <Button variant=\"contained\" color=\"primary\" onClick={this.restHandler} >Reset</Button>\n            </div>\n            <footer>\n              <span>Created by Stuart Ferguson</span>\n            </footer>\n          </Paper>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}